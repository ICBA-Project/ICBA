@model IEnumerable<Sensor>


<style>
     table {
         border-spacing: 0;
         width: 100%;
         border: 1px solid #ddd;
        
    }

     th {
         cursor: pointer;
        
    }

     th, td {
         text-align: left;
         padding: 16px;
        
    }

     tr:nth-child(even) {
         background-color: #f2f2f2
    }
  
</style>
 
<link rel="stylesheet" href="../../Content/css/matrix-style.css" />

<div class="chooseSensor">
    <span class="icon"> <i class="icon-align-justify"></i>
        Sensors count: <span class="sensorsCount">@Model.Count()</span>
    </span>
</div>
<input type="text" id="myInput" onkeyup="myFunction()" placeholder="Search for sensor name.." title="Type in a name">
 <table id="myTable" class="table-fill" width="100%">
    <tr>
        <th class="text-left">
            #
        </th>
        <th onclick="sortTable(0)" class="text-left" style="display: none;">
            @Html.DisplayNameFor(model => model.First().Id)
        </th>
        <th onclick="sortTable(1)" class="text-left">
            @Html.DisplayNameFor(model => model.First().SensorName)
        </th>
        <th onclick="sortTable(2)" class="text-left">
            @Html.DisplayNameFor(model => model.First().Description)
        </th>
        <th onclick="sortTable(3)" class="text-left">
            @Html.DisplayNameFor(model => model.First().Url)
        </th>
        <th onclick="sortTable(4)" class="text-left">
            @Html.DisplayNameFor(model => model.First().MeasureType)
        </th>
        <th onclick="sortTable(5)" class="text-left">
            @Html.DisplayNameFor(model => model.First().PollingInterval)
        </th>
        <th onclick="sortTable(6)" class="text-left">
            @Html.DisplayNameFor(model => model.First().AccessIsPublic)
        </th>
        <th onclick="sortTable(7)" class="text-left">
            @Html.DisplayNameFor(model => model.First().MinRange)
        </th>
        <th onclick="sortTable(8)" class="text-left">
            @Html.DisplayNameFor(model => model.First().MaxRange)
        </th>
        <th onclick="sortTable(9)" class="text-left">
            @Html.DisplayNameFor(model => model.First().CurrentValue)
        </th>
        <th onclick="sortTable(10)" class="text-left">
            @Html.DisplayNameFor(model => model.First().LastUpdated)
        </th>
        <th onclick="sortTable(11)" class="text-left">
            @Html.DisplayNameFor(model => model.First().OwnerId)
        </th>
    </tr>

    <tbody class="table hover">
        @{
            int sensorIndex = 0;
        }
        @foreach (Sensor sensor in Model)
        {
            <tr class="tableRow">
                <td class="text-left">
                    @{
                        string index = (sensorIndex + 1).ToString();
                        string className = "sensorIndex" + sensorIndex;
                        string classSensorName = "name" + sensorIndex;
                        string classUrl = "url" + sensorIndex;
                        string classMin = "min" + sensorIndex;
                        string classMax = "max" + sensorIndex;
                        string classValue = "value" + sensorIndex;
                        string updateInterval = "updateInterval" + sensorIndex;
                        string placeholder2 = "placeholder2" + sensorIndex;
                    }
                    @index
                </td>
                <td class="text-left" style="display: none;">
                    @Html.DisplayFor(modelItem => sensor.Id)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.SensorName)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.Description)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.Url)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.MeasureType)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.PollingInterval)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.AccessIsPublic)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.MinRange)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.MaxRange)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.CurrentValue)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.LastUpdated)
                </td>
                <td class="text-left">
                    @Html.DisplayFor(modelItem => sensor.OwnerId)
                </td>
            </tr>
            <tr class="tableRowDiv @className" style="display: none;">
                <td colspan="12">
                    <div>
                        <div class="container-fluid">
                            <div class="row-fluid">
                                <div class="span12">
                                    <div class="widget-box">
                                        <div class="widget-title">
                                            <span class="icon"> <i class="icon-signal"></i> </span>
                                            <h5>Sensor value in real time</h5>
                                        </div>
                                        <div class="widget-content">
                                            <div id="placeholder2" class=@placeholder2 style="width:1055px; height:400px;"></div>
                                            <p>
                                                Time between updates:
                                                <input id="updateInterval" class=@updateInterval type="text" value="" style="text-align: right; width:5em">
                                                milliseconds
                                                <span class=@classSensorName style="display:none">@sensor.SensorName</span>
                                                <span class=@classUrl style="display:none">@sensor.Url</span>
                                                <span class=@classMin style="display:none">@sensor.MinRange</span>
                                                <span class=@classMax style="display:none">@sensor.MaxRange</span>
                                                <span style="float: right">Current value: <span class=@classValue></span> @sensor.MeasureType</span>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </td>
            </tr>
                            sensorIndex++;
                        }
    </tbody>
</table>

<script src="../../Scripts/js/jquery.min.js"></script>
<script src="../../Scripts/js/jquery.flot.min.js"></script>
<script src='https://code.responsivevoice.org/responsivevoice.js'></script>
<script type="text/javascript">
    $('.tableRow').click(function () {
        $(this).nextUntil('tr.tableRow').slideToggle(0);
    });

    $(function () {
        for (let i = 0; i < $(".sensorsCount").html(); i++) {
            let length = 300;
            let data = [], totalPoints = 300;
            while (length--) data.push(0);

            let finalMinString = ".min" + i;
            let minValue = parseInt($(finalMinString).html());
            let finalMaxString = ".max" + i;
            let maxValue = parseInt($(finalMaxString).html());

            function getRandomData() {
                if (data.length >= 300)
                    data = data.slice(1);

                let finalUrlString = ".url" + i;
                let finalUrl = $(finalUrlString).html();
                $.ajax({
                    url: finalUrl,
                    method: 'GET',
                    beforeSend: function (xhr) { xhr.setRequestHeader('auth-token', '8e4c46fe-5e1d-4382-b7fc-19541f7bf3b0'); },
                }).done(function (result) {
                    if (result.value == undefined) {
                        $('.placeholder2' + i).css("background-image", "url(../Assests/img/icb.png)");
                    }
                    if (result.value == "true") {
                        data.push("1");
                    } else if (result.value == "false") {
                        data.push("0");
                    } else {
                        if (result.value < minValue) {
                            data.push(minValue);
                            responsiveVoice.speak($('.name' + i).html() + " below minimum.");
                        } else if (result.value > maxValue) {
                            data.push(maxValue);
                            responsiveVoice.speak($('.name' + i).html() + " above maximum.");
                        } else {
                            data.push(result.value);
                        }
                    }
                    let finalValueString = ".value" + i;
                    $(finalValueString).text(result.value)
                })

                let res = [];
                for (let i = 0; i < data.length; ++i)
                    res.push([i, data[i]])
                return res;
            }

            let finalUpdateInterval = ".updateInterval" + i;
            let updateInterval = 3000;
            $(finalUpdateInterval).val(updateInterval).change(function () {
                let v = $(this).val();
                if (v && !isNaN(+v)) {
                    updateInterval = +v;
                    if (updateInterval < 1)
                        updateInterval = 1;
                    if (updateInterval > 10000)
                        updateInterval = 10000;
                    $(this).val("" + updateInterval);
                }
            });

            let options = {
                series: { shadowSize: 0 },
                yaxis: { min: minValue, max: maxValue },
                xaxis: { show: false }
            };

            let finalPlaceHolderString = ".placeholder2" + i;
            let plot = $.plot($(finalPlaceHolderString), [getRandomData()], options);

            function update() {
                plot.setData([getRandomData()]);

                plot.draw();

                setTimeout(update, updateInterval);
            }

            update();
        }
    });
</script>


<script type="text/javascript">
    function myFunction() {
        var input, filter, table, tr, td, i;
        input = document.getElementById("myInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[2];
            if (td) {
                if (td.innerHTML.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
    </script>

<script type="text/javascript">
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("myTable");
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc";
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.getElementsByTagName("TR");
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 2].getElementsByTagName("TD")[n];

                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {

                        console.log(x.innerHTML);
                        console.log(y.innerHTML);
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 2], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>


